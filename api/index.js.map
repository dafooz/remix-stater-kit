{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/root.tsx", "../app/theme/chakra.tsx", "../app/utils/i18n.server.ts", "/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/auth/google.tsx", "../app/utils/auth.server.ts", "../app/utils/session.server.ts", "../app/utils/db.server.ts", "/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/auth/google/callback.tsx", "/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/logout.tsx", "/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/index.tsx", "../app/components/generic/colorModeSwitcher.tsx", "/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/login.tsx", "/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/app.tsx", "/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/app/dashboard.tsx", "../app/_actions/dashboard.ts", "../app/_catch-boundaries/dashboard.tsx", "../app/_loaders/dashboard.ts", "/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/app/index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import { createInstance } from 'i18next';\nimport { renderToString } from 'react-dom/server';\nimport { I18nextProvider, initReactI18next } from 'react-i18next';\n\nimport { RemixServer } from '@remix-run/react';\nimport { EntryContext } from '@remix-run/react/entry';\n\nexport default async function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  // Here you also need to initialize i18next using initReactI18next, you should\n  // use the same configuration as in your client side.\n  // create an instance so every request will have a copy and don't re-use the\n  // i18n object\n  let i18n = createInstance();\n  await i18n.use(initReactI18next).init({\n    supportedLngs: ['en', 'fr'],\n    defaultNS: 'common',\n    fallbackLng: 'en',\n    react: { useSuspense: false },\n  });\n\n  // Then you can render your app wrapped in the RemixI18NextProvider as in the\n  // entry.client file\n  let markup = renderToString(\n    <I18nextProvider i18n={i18n}>\n      <RemixServer context={remixContext} url={request.url} />\n    </I18nextProvider>,\n  );\n\n  responseHeaders.set('Content-Type', 'text/html');\n\n  return new Response('<!DOCTYPE html>' + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import { useSetupTranslations } from 'remix-i18next';\nimport { Chakra } from '~/theme/chakra';\n\nimport { LoaderFunction } from '@remix-run/node';\nimport {\n    Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration, useLoaderData\n} from '@remix-run/react';\n\nimport { i18n } from './utils/i18n.server';\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  let locale = await i18n.getLocale(request);\n  return { cookies: request.headers.get('Cookie'), locale };\n};\n\nexport default function App() {\n  const { cookies, locale } = useLoaderData();\n\n  useSetupTranslations(locale);\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Chakra cookies={cookies}>\n          <Outlet />\n        </Chakra>\n        <ScrollRestoration />\n        <Scripts />\n        {process.env.NODE_ENV === 'development' && <LiveReload />}\n      </body>\n    </html>\n  );\n}\n", "import { ChakraProvider, cookieStorageManager, localStorageManager } from '@chakra-ui/react';\nimport { ReactNode } from 'react';\n\ninterface ChakraProps {\n  cookies?: string;\n  children: ReactNode;\n}\n\nexport function Chakra({ cookies, children }: ChakraProps) {\n  const colorModeManager =\n    typeof cookies === 'string' ? cookieStorageManager(cookies) : localStorageManager;\n\n  return <ChakraProvider colorModeManager={colorModeManager}>{children}</ChakraProvider>;\n}\n", "import { RemixI18Next } from 'remix-i18next';\n\nimport type { Backend } from 'remix-i18next';\n\nclass i18NexusBackend implements Backend {\n  private url: URL;\n\n  constructor() {\n    this.url = new URL('https://api.i18nexus.com/project_resources/translations/');\n  }\n\n  async getTranslations(namespace: string, locale: string) {\n    let url = new URL(\n      `${locale}/${namespace}.json?api_key=${process.env.I18NEXUS_API_KEY}`,\n      this.url,\n    );\n    let response = await fetch(url.toString(), {\n      headers: { accept: 'application/json' },\n    });\n    return response.json();\n  }\n}\n\nlet backend = new i18NexusBackend();\n\nexport let i18n = new RemixI18Next(backend, {\n  fallbackLng: 'en', // here configure your default (fallback) language\n  supportedLanguages: ['en', 'fr'], // here configure your supported languages\n});\n", "import { authenticator } from '~/utils/auth.server';\n\nimport { ActionFunction, LoaderFunction, redirect } from '@remix-run/node';\n\nexport let loader: LoaderFunction = () => redirect('/login');\n\nexport let action: ActionFunction = ({ request }) => {\n  return authenticator.authenticate('google', request);\n};\n", "import dayjs from 'dayjs';\nimport { nanoid } from 'nanoid';\n// app/services/auth.server.ts\nimport { Authenticator } from 'remix-auth';\nimport { GoogleStrategy } from 'remix-auth-google';\nimport { sessionStorage } from '~/utils/session.server';\n\nimport { Logtail } from '@logtail/node';\nimport { User } from '@prisma/client';\n\nimport { db } from './db.server';\n\ntype UserType = User & { isNew: boolean };\n\nexport let authenticator = new Authenticator<UserType | null>(sessionStorage);\n\nconst logtail = new Logtail(process.env.LOGTAIL_SOURCE_TOKEN || '');\n\nlet googleStrategy = new GoogleStrategy(\n  {\n    clientID: process.env.AUTH_PROVIDER_GOOGLE_CLIENTID || '',\n    clientSecret: process.env.AUTH_PROVIDER_GOOGLE_CLIENTSECRET || '',\n    callbackURL: process.env.AUTH_PROVIDER_GOOGLE_CALLBACK || '',\n  },\n  async ({ accessToken, refreshToken, extraParams, profile }) => {\n    const user = await db.user.upsert({\n      where: { email: profile._json.email },\n      update: {\n        displayName: profile._json.name,\n        givenName: profile._json.given_name,\n        familyName: profile._json.family_name,\n        email: profile.emails[0].value,\n        emailVerified: `${profile._json.email_verified}`,\n        image: profile._json.picture,\n        locale: profile._json.locale,\n      },\n      create: {\n        displayName: profile._json.name,\n        givenName: profile._json.given_name,\n        familyName: profile._json.family_name,\n        email: profile.emails[0].value,\n        userName: profile.emails[0].value,\n        emailVerified: `${profile._json.email_verified}`,\n        image: profile._json.picture,\n        locale: profile._json.locale,\n        accounts: {\n          connectOrCreate: {\n            where: {\n              provider_providerAccountId: {\n                provider: profile.provider,\n                providerAccountId: profile.id,\n              },\n            },\n            create: {\n              type: profile.provider,\n              provider: profile.provider,\n              providerAccountId: profile.id,\n              refresh_token: refreshToken,\n              access_token: accessToken,\n              expires_at: Date.now() + extraParams.expires_in,\n              token_type: extraParams.token_type,\n              scope: extraParams.scope,\n              id_token: extraParams.id_token,\n            },\n          },\n        },\n        // TODO: ADD HERE ANYTHING THAT SHOULD HAPPEN UPON USER CREATION\n      },\n    });\n\n    if (user) {\n      const isNew = dayjs(user.updatedAt).diff(dayjs(user.createdAt), 'second') < 2;\n      isNew\n        ? logtail.info('New user registered', { user: { id: user.id, userName: user.userName } })\n        : logtail.info('Registered user signin', {\n            user: { id: user.id, userName: user.userName },\n          });\n      return { ...user, isNew };\n    }\n    return null;\n  },\n);\n\nauthenticator.use(googleStrategy);\n", "// app/services/session.server.ts\nimport { createCookieSessionStorage, redirect } from '@remix-run/node';\n\n// export the whole sessionStorage object\nexport let sessionStorage = createCookieSessionStorage({\n  cookie: {\n    // TODO add cookie name\n    name: '<YOUR_COOKIE_NAME>', // use any name you want here\n    sameSite: 'lax', // this helps with CSRF\n    path: '/', // remember to add this so the cookie will work in all routes\n    httpOnly: true, // for security reasons, make this cookie http only\n    secrets: ['s3cr3t'], // replace this with an actual secret\n    secure: process.env.NODE_ENV === 'production', // enable this in prod only\n  },\n});\n\n// you can also export the methods individually for your own usage\nexport let { getSession, commitSession, destroySession } = sessionStorage;\n\nexport function getUserSession(request: Request) {\n  return sessionStorage.getSession(request.headers.get('Cookie'));\n}\n\nexport const requireUserId = async (\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname,\n): Promise<{ id: string; email: string }> => {\n  const session = await getUserSession(request);\n  const user = session.get('user');\n  if (!user || typeof user.id !== 'string') {\n    const searchParams = new URLSearchParams([['redirectTo', redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return { id: user.id, email: user.email };\n};\n", "import { PrismaClient } from '@prisma/client';\n\nlet db: PrismaClient;\n\ndeclare global {\n  var __db: PrismaClient | undefined;\n}\n\n// this is needed because in development we don't want to restart\n// the server with every change, but we want to make sure we don't\n// create a new connection to the DB with every change either.\nif (process.env.NODE_ENV === 'production') {\n  db = new PrismaClient();\n  db.$connect();\n} else {\n  if (!global.__db) {\n    global.__db = new PrismaClient({ log: ['warn', 'error'] });\n    global.__db.$connect();\n  }\n  db = global.__db;\n}\n\nexport { db };\n", "import { authenticator } from '~/utils/auth.server';\nimport { commitSession, getSession } from '~/utils/session.server';\n\nimport { LoaderFunction, redirect } from '@remix-run/node';\n\nexport let loader: LoaderFunction = async ({ request }) => {\n  let user = await authenticator.authenticate('google', request, {\n    // TODO: Add the failure redirect\n    failureRedirect: 'REDIRECT IF AUTH FAILS', // Ex: /login?error=authenticationFailed\n  });\n\n  // manually get the session\n  let session = await getSession(request.headers.get('cookie'));\n  // and store the user data\n  session.set(authenticator.sessionKey, user);\n\n  // commit the session\n  let headers = new Headers({ 'Set-Cookie': await commitSession(session) });\n\n  if (user) {\n    // TODO Add redirection if succesful login\n    return redirect(`ENTER CORRECT REDIRECTION`, { headers });\n  }\n\n};\n", "import { authenticator } from '~/utils/auth.server';\n\nimport { ActionFunction } from '@remix-run/node';\n\nexport let action: ActionFunction = async ({ request }) => {\n  await authenticator.logout(request, { redirectTo: '/login' });\n};\n", "import { ColorModeSwitcher } from '~/components/generic/colorModeSwitcher';\n\nimport { Button, Text } from '@chakra-ui/react';\nimport { Link } from '@remix-run/react';\n\nexport default function Index() {\n  return (\n    <div style={{ fontFamily: 'system-ui, sans-serif', lineHeight: '1.4' }}>\n      <Text as=\"h1\" fontSize=\"4xl\">\n        YOUR LANDING PAGE\n      </Text>\n      <Text>Theme switcher</Text>\n      <ColorModeSwitcher />\n      <div>\n        <Text>Main page action</Text>\n        <Button as={Link} to=\"/login\" prefetch=\"intent\">\n          Go to app\n        </Button>\n      </div>\n    </div>\n  );\n}\n", "import {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher = (props: ColorModeSwitcherProps) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}", "import { authenticator } from '~/utils/auth.server';\n\nimport { Button, Text } from '@chakra-ui/react';\nimport { LoaderFunction } from '@remix-run/node';\nimport { Form } from '@remix-run/react';\n\nexport let loader: LoaderFunction = async ({ request }) => {\n  return await authenticator.isAuthenticated(request, {\n    // TODO Add the redirect URL\n    successRedirect: 'THE_REDIRECT_URL', // EEX: /app/dashboard\n  });\n};\n\nexport default function Login() {\n  return (\n    <>\n      <Text as=\"h1\" fontSize=\"4xl\">\n        Some kick ass login page\n      </Text>\n      <Form action=\"/auth/google\" method=\"post\">\n        <Button type=\"submit\">Login with Google</Button>\n      </Form>\n    </>\n  );\n}\n", "import { useTranslation } from 'react-i18next';\nimport { Language } from 'remix-i18next';\nimport { ColorModeSwitcher } from '~/components/generic/colorModeSwitcher';\nimport { authenticator } from '~/utils/auth.server';\nimport { i18n } from '~/utils/i18n.server';\n\nimport { Box, Button, HStack } from '@chakra-ui/react';\nimport { LoaderFunction, redirect } from '@remix-run/node';\nimport { Form, Outlet, useLoaderData } from '@remix-run/react';\n\ntype LoaderData = {\n  displayName: string;\n  i18n: Record<string, Language>;\n};\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  let user = await authenticator.isAuthenticated(request);\n\n  if (!user) {\n    throw redirect('/login');\n  }\n\n  const data: LoaderData = {\n    displayName: user.displayName,\n    i18n: await i18n.getTranslations(request, ['common']),\n  };\n\n  return data;\n};\n\nexport default function AppRoute() {\n  const { displayName } = useLoaderData<LoaderData>();\n  let { t } = useTranslation('common');\n\n  return (\n    <Box>\n      <header>\n        <HStack>\n          <Box>{t('logged_in', { displayName })}</Box>\n          <Form action=\"/logout\" method=\"post\">\n            <Button type=\"submit\" className=\"button\">\n              Logout\n            </Button>\n          </Form>\n          <ColorModeSwitcher />\n        </HStack>\n      </header>\n      <main>\n        <Box p={4}>\n          <Outlet />\n        </Box>\n      </main>\n    </Box>\n  );\n}\n", "import { dashboardAction } from '~/_actions';\nimport { dashboardCatchBoundary } from '~/_catch-boundaries/dashboard';\nimport { dashboardLoader } from '~/_loaders';\n\nimport { ActionFunction, LoaderFunction } from '@remix-run/node';\nimport { Link } from '@remix-run/react';\nimport { CatchBoundaryComponent } from '@remix-run/react/routeModules';\n\nexport const loader: LoaderFunction = dashboardLoader;\n\nexport const action: ActionFunction = dashboardAction;\n\nexport const CatchBoundary: CatchBoundaryComponent = dashboardCatchBoundary;\n\nconst DashboardPage = () => {\n  return <div>Dashboard</div>;\n};\n\nexport default DashboardPage;\n\nexport const handle = {\n  breadcrumb: () => <Link to=\"/app/dashboard\">Dashboard</Link>,\n};\n", "import { requireUserId } from '~/utils/session.server';\n\nimport { ActionFunction } from '@remix-run/node';\n\nexport const dashboardAction: ActionFunction = async ({ request }) => {\n  const { id: userId } = await requireUserId(request);\n  const formData = await request.formData();\n\n  // TODO: ADD SUPPORTED ACTIONS IF NEEDED\n};\n", "\nimport { useCatch } from '@remix-run/react';\nimport { CatchBoundaryComponent } from '@remix-run/react/routeModules';\n\nexport const dashboardCatchBoundary: CatchBoundaryComponent = () => {\n  const caught = useCatch();\n  switch (caught.status) {\n    case 404: {\n      return <div>Huh? There seems to be a misconfiguration with your user...</div>;\n    }\n    default: {\n      throw new Error(`Unhandled error: ${caught.status}`);\n    }\n  }\n};\n", "import { requireUserId } from '~/utils/session.server';\n\nimport { Logtail } from '@logtail/node';\nimport { LoaderFunction } from '@remix-run/node';\n\nexport const dashboardLoader: LoaderFunction = async ({ request, params }) => {\n  const { id: userId, email } = await requireUserId(request);\n\n  const logtail = new Logtail(process.env.LOGTAIL_SOURCE_TOKEN || '');\n\n  // TODO Load user data\n\n  // LOGS INTO DOVEETAIL + throws error\n  // if (!data) {\n  //   logtail.error(`[USER NOT FOUND] - User with id ${userId} not found`);\n  //   throw new Response(`[USER NOT FOUND] - User with id ${userId} not found`, { status: 404 });\n  // }\n  return { userId };\n};\n", "import { LoaderFunction, redirect } from '@remix-run/node';\n\nexport let loader: LoaderFunction = async ({}) => {\n  return redirect('/app/dashboard');\n};\n", "export default {'version':'d540633e','entry':{'module':'/build/entry.client-NOZM5W72.js','imports':['/build/_shared/chunk-GWZGFYBY.js','/build/_shared/chunk-TF7DY7FC.js','/build/_shared/chunk-JO3S54GD.js','/build/_shared/chunk-XV23MX66.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-LSPPWWTQ.js','imports':['/build/_shared/chunk-K73FYERD.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/app':{'id':'routes/app','parentId':'root','path':'app','index':undefined,'caseSensitive':undefined,'module':'/build/routes/app-3LOBCZIW.js','imports':['/build/_shared/chunk-5BKNI2WB.js','/build/_shared/chunk-PMDNWKIC.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/app/dashboard':{'id':'routes/app/dashboard','parentId':'routes/app','path':'dashboard','index':undefined,'caseSensitive':undefined,'module':'/build/routes/app/dashboard-VL62RUGF.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':true,'hasErrorBoundary':false},'routes/app/index':{'id':'routes/app/index','parentId':'routes/app','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/app/index-554DVY6Z.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/auth/google':{'id':'routes/auth/google','parentId':'root','path':'auth/google','index':undefined,'caseSensitive':undefined,'module':'/build/routes/auth/google-PLLR2SDF.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/auth/google/callback':{'id':'routes/auth/google/callback','parentId':'routes/auth/google','path':'callback','index':undefined,'caseSensitive':undefined,'module':'/build/routes/auth/google/callback-EDXC7UTZ.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-2HPQINSE.js','imports':['/build/_shared/chunk-5BKNI2WB.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/login-V26PEASF.js','imports':['/build/_shared/chunk-PMDNWKIC.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/build/routes/logout-KV3VZEKN.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-D540633E.js'};", "\nimport * as entryServer from \"/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/entry.server.tsx\";\nimport * as route0 from \"/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/root.tsx\";\nimport * as route1 from \"/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/auth/google.tsx\";\nimport * as route2 from \"/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/auth/google/callback.tsx\";\nimport * as route3 from \"/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/logout.tsx\";\nimport * as route4 from \"/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/index.tsx\";\nimport * as route5 from \"/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/login.tsx\";\nimport * as route6 from \"/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/app.tsx\";\nimport * as route7 from \"/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/app/dashboard.tsx\";\nimport * as route8 from \"/Users/jjouret/Documents/__DEV__/remix-stater-kit/app/routes/app/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/auth/google\": {\n      id: \"routes/auth/google\",\n      parentId: \"root\",\n      path: \"auth/google\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/auth/google/callback\": {\n      id: \"routes/auth/google/callback\",\n      parentId: \"routes/auth/google\",\n      path: \"callback\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/app\": {\n      id: \"routes/app\",\n      parentId: \"root\",\n      path: \"app\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/app/dashboard\": {\n      id: \"routes/app/dashboard\",\n      parentId: \"routes/app\",\n      path: \"dashboard\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/app/index\": {\n      id: \"routes/app/index\",\n      parentId: \"routes/app\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route8\n    }\n  };"],
  "mappings": "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",
  "names": []
}
